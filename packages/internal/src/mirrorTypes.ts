import fs from 'fs'
import path from 'path'

import { findCells } from './findFiles'
import { getPaths } from './paths'

export const generateDirectoryNamedModuleTypeDefs = () => {}

export const generateCellTypesDefs = () => {
  const rwjsPaths = getPaths()
  const cellPaths = findCells()

  return cellPaths.map((cellPath) => {
    const { dir, name } = path.parse(cellPath)

    const cellMirrorDir = path.join(
      rwjsPaths.mirror,
      dir.replace(rwjsPaths.base, '')
    )
    fs.mkdirSync(cellMirrorDir, { recursive: true })

    const cellMirrorTypeDef = path.join(cellMirrorDir, 'index.d.ts')
    // Note: We're using this wacky identation to create nicely formatted files.
    const cellTypeDef = `// This file is generated by RedwoodJS
import { Success } from './${name}'
type SuccessType = typeof Success
export default function (): ReturnType<SuccessType>
`
    fs.writeFileSync(cellMirrorTypeDef, cellTypeDef)

    return cellMirrorTypeDef
  })
}
