import fs from 'fs'
import path from 'path'

import { findCells, findDirectoryNamedModules } from './findFiles'
import { getPaths, processPagesDir } from './paths'

// TODO: We generate some types as part of the transpilation process.
// Those should be removed and placed over here.
export const generateTypes = () => {
  const p1 = generateDirectoryNamedModuleTypeDefs()
  const p2 = generateCellTypesDefs()
  const p3 = generateRouterPageImports()

  return [...p1, ...p2, p3[0]]
}

export const generateRouterPageImports = () => {
  const rwjsPaths = getPaths()
  const pages = processPagesDir()

  const defs = pages.map(({ const: importName, importPath }) => {
    return [
      `import ${importName}Type from '${importPath}'`,
      `const ${importName}: typeof ${importName}Type`,
    ]
  })

  const typeDefContents = `// This file is generated by RedwoodJS
${defs.map((x) => x[0]).join('\n')}

declare global {
  ${defs.map((x) => x[1]).join('\n  ')}
}
`
  const typeDefPath = path.join(rwjsPaths.types, 'global-pages.d.ts')
  fs.writeFileSync(typeDefPath, typeDefContents)
  return [typeDefPath]
}
export const generateDirectoryNamedModuleTypeDefs = () => {
  const rwjsPaths = getPaths()
  const paths = findDirectoryNamedModules()

  return paths.map((p) => {
    const { dir, name } = path.parse(p)

    const mirrorDir = path.join(
      rwjsPaths.mirror,
      dir.replace(rwjsPaths.base, '')
    )
    fs.mkdirSync(mirrorDir, { recursive: true })
    const typeDefPath = path.join(mirrorDir, 'index.d.ts')
    // Note: We're using this wacky identation to create nicely formatted files.
    const typeDefContents = `// This file is generated by RedwoodJS
import { default as DEFAULT } from './${name}'
export default DEFAULT
export * from './${name}'
`
    fs.writeFileSync(typeDefPath, typeDefContents)

    return typeDefPath
  })
}

export const generateCellTypesDefs = () => {
  const rwjsPaths = getPaths()
  const paths = findCells()

  return paths.map((p) => {
    const { dir, name } = path.parse(p)

    const mirrorDir = path.join(
      rwjsPaths.mirror,
      dir.replace(rwjsPaths.base, '')
    )
    fs.mkdirSync(mirrorDir, { recursive: true })

    const typeDefPath = path.join(mirrorDir, 'index.d.ts')
    // Note: We're using this wacky identation to create nicely formatted files.
    const typeDefContents = `// This file is generated by RedwoodJS
import { Success } from './${name}'
type SuccessType = typeof Success
export default function (): ReturnType<SuccessType>
`
    fs.writeFileSync(typeDefPath, typeDefContents)

    return typeDefPath
  })
}
